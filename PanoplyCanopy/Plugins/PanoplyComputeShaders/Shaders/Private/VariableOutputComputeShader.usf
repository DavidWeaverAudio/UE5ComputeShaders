#include "/Engine/Public/Platform.ush"

float3 Input;
float3 SurfaceNormal;
int TotalOutputs;
RWStructuredBuffer<float3> Output : register(u0);

float3 CalculateReflection(float3 inputVector, float3 normal)
{
    return inputVector - (2.0f * dot(inputVector, normal)) / pow(length(normal), 2) * normal;
}

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void VariableOutputComputeShader(uint3 DispatchThreadId : SV_DispatchThreadID, uint GroupIndex : SV_GroupIndex)
{
    for (int i = 0; i < TotalOutputs; i++)
    {
        float3 reflection = CalculateReflection(Input, SurfaceNormal);
        Output[3] = reflection;
    }
    
}